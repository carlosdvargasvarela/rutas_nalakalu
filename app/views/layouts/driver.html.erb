<!DOCTYPE html>
<html lang="es">
  <head>
    <title>NaLakalu - Conductor</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#667eea">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <link rel="manifest" href="/manifest.json">
    <style>
      body {
        padding-bottom: 80px;
        background-color: #f8f9fa;
      }
      .navbar-driver {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        box-shadow: 0 2px 4px rgba(0,0,0,.1);
      }
      .card {
        border: 0;
        border-radius: 0.75rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,.075);
        margin-bottom: 1rem;
      }
      .assignment-card {
        transition: all 0.2s ease;
      }
      .assignment-card:active {
        transform: scale(0.98);
      }
      .status-badge {
        font-size: 0.75rem;
        padding: 0.35rem 0.65rem;
        border-radius: 0.5rem;
      }
      .btn-action {
        border-radius: 0.5rem;
        font-weight: 600;
        padding: 0.5rem 1rem;
      }
      .offline-banner {
        position: fixed;
        top: 56px;
        left: 0;
        right: 0;
        z-index: 1040;
        animation: slideDown 0.3s ease;
      }
      @keyframes slideDown {
        from { transform: translateY(-100%); }
        to { transform: translateY(0); }
      }
    </style>
  </head>
  <body>
    <div id="driver-layout-flag" class="d-none">driver layout</div>
    <!-- Navbar -->
    <nav class="navbar navbar-dark navbar-driver fixed-top">
      <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="<%= driver_delivery_plans_path %>">
          <i class="bi bi-truck me-2"></i>NaLakalu
        </a>
        <div class="d-flex align-items-center gap-2">
          <span class="badge bg-light text-dark" data-offline-queue-target="badge">
            <i class="bi bi-wifi"></i>
          </span>
          <div class="dropdown">
            <button class="btn btn-link text-white p-0" type="button" data-bs-toggle="dropdown">
              <i class="bi bi-person-circle fs-4"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
              <li><span class="dropdown-item-text small"><%= current_user.name %></span></li>
              <li><hr class="dropdown-divider"></li>
              <li>
                <%= link_to destroy_user_session_path, data: { turbo_method: :delete }, class: "dropdown-item" do %>
                  <i class="bi bi-box-arrow-right me-2"></i>Cerrar sesi칩n
                <% end %>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </nav>
    <!-- Banner offline -->
    <div id="offline-banner" class="offline-banner alert alert-warning mb-0 rounded-0 text-center d-none" role="alert">
      <i class="bi bi-wifi-off me-2"></i>
      <strong>Sin conexi칩n.</strong> Tus acciones se sincronizar치n autom치ticamente.
    </div>
    <!-- Contenido principal -->
    <div class="container-fluid mt-5 pt-3" data-controller="offline-queue">
      <%= yield %>
    </div>
    <!-- Toast container -->
    <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
      <div id="toasts-container"></div>
    </div>
    <!-- Scripts -->
    <script>
      // Registrar Service Worker
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', async () => {
          try {
            const reg = await navigator.serviceWorker.register('/service-worker.js')
            console.log('[SW] Registered', reg)
          } catch (e) {
            console.warn('[SW] Registration failed', e)
          }
        })
      }

      // Mostrar/ocultar banner offline
      function updateOfflineBanner() {
        const banner = document.getElementById('offline-banner')
        if (navigator.onLine) {
          banner?.classList.add('d-none')
        } else {
          banner?.classList.remove('d-none')
        }
      }

      window.addEventListener('online', updateOfflineBanner)
      window.addEventListener('offline', updateOfflineBanner)
      updateOfflineBanner()

      // Sistema de toasts
      document.addEventListener("toast:show", (e) => {
        const { message, type } = e.detail || {}
        showToast(message, type)
      })

      function showToast(message, type = 'info') {
        const container = document.getElementById('toasts-container')
        if (!container) return

        const bgClass = {
          success: 'bg-success',
          error: 'bg-danger',
          warning: 'bg-warning',
          info: 'bg-primary'
        }[type] || 'bg-primary'

        const icon = {
          success: 'check-circle-fill',
          error: 'exclamation-octagon-fill',
          warning: 'exclamation-triangle-fill',
          info: 'info-circle-fill'
        }[type] || 'info-circle-fill'

        const toastId = `toast-${Date.now()}`
        const toastHTML = `
          <div id="${toastId}" class="toast align-items-center text-white ${bgClass} border-0" role="alert">
            <div class="d-flex">
              <div class="toast-body">
                <i class="bi bi-${icon} me-2"></i>${message}
              </div>
              <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
          </div>
        `
        container.insertAdjacentHTML('beforeend', toastHTML)

        const toastEl = document.getElementById(toastId)
        const toast = new bootstrap.Toast(toastEl, { delay: 3000 })
        toast.show()

        toastEl.addEventListener('hidden.bs.toast', () => toastEl.remove())
      }
    </script>
  </body>
</html>